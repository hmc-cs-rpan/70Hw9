Test 1: OK    		(Basic HashSet test (using HashSet<size_t>))
			Command: ./cs70-hashset-test 

Test 2: Failed		(myspell -d with empty dictionary, empty input)
			Command: ./myspell -d /dev/null
cout>	0 expansions, load factor 0, 0 collisions, longest run 0
- output found when no output expected (cout output)
- no output found (cerr output)

Test 3: OK    		(myspell with tiny dictionary checking itself)
			Command: ./myspell /cs/grader/cs70grad/support/10/testcases/tinywords.dict

Test 4: Failed		(myspell with tiny dictionary checking misspellings)
			Command: ./myspell /cs/grader/cs70grad/support/10/testcases/tinywords.dict
- output differences (cout output)

Test 5: Failed		(myspell with big dictionary checking misspellings)
			Command: ./myspell /cs/grader/cs70grad/support/10/testcases/words.dict
- output differences (cout output)

Test 6: OK    		(myspell with big dictionary checking itself)
			Command: ./myspell /cs/grader/cs70grad/support/10/testcases/words.dict

Test 7: OK    		(myspell with too few arguments)
			Command: /bin/sh 
cerr>	Usage: ./myspell [-d] dict

Test 8: Failed		(myspell -d with tiny dictionary checking itself)
			Command: ./myspell -d /cs/grader/cs70grad/support/10/testcases/tinywords.dict
cout>	4 expansions, load factor 5.16406, 533 collisions, longest run 13
- output found when no output expected (cout output)
- no output found (cerr output)

Test 9: Failed		(myspell -d with large dictionary checking itself)
			Command: ./myspell -d /cs/grader/cs70grad/support/10/testcases/words.dict
cout>	8 expansions, load factor 9.79932, 18021 collisions, longest run 24
- output found when no output expected (cout output)
- no output found (cerr output)

Test 10: Failed		(myspell -d with huge dictionary)
			Command: ./myspell -d /cs/grader/cs70grad/support/10/testcases/huge.dict
cout>	14 expansions, load factor 7.81754, 893610 collisions, longest run 21
- output found when no output expected (cout output)
- no output found (cerr output)

Test 11: Failed		(myspell -d with small dictionary, repeated misspellings)
			Command: ./myspell -d /cs/grader/cs70grad/support/10/testcases/random.words
cout>	1 expansions, load factor 7.125, 98 collisions, longest run 12
cout>	y: 
cout>	y: 
cout>	y: 
	[ ... etc. ... ]
- exited with signal 9 [CPU time limit exceeded (inefficient / infinite loop)]
- output differences (cout output)
- no output found (cerr output)

Test 12: OK    		(myspell with tiny dictionary checking itself (+ valgrind))
			Command: /usr/bin/valgrind -q ./myspell /cs/grader/cs70grad/support/10/testcases/tinywords.dict

Test 13: OK    		(myhash test)
			Command: ./cs70-stringhash-test 
cout>	In 234937 lines:
cout>	  - Expected: 6.42533 hash collisions, stddev 2.53482
cout>	  - Actual:   234934 unique hashes, 3 hash collisions:
cout>	  - Specifically:
cout>		2257407170: shopwear photochronographically
cout>		935492874: disenthronement commodious
cout>		2870634930: sexto dispeaceful
cout>	Average avalanche:
cout>		14.4217/64 bits for one bit change in 1 character key
cout>		17.2263/64 bits for one bit change in 2 character key
cout>		22.5856/64 bits for one bit change in 4 character key
cout>		26.7218/64 bits for one bit change in 8 character key
cout>		28.747/64 bits for one bit change in 16 character key
cout>		29.7314/64 bits for one bit change in 32 character key
cout>		30.1689/64 bits for one bit change in 64 character key
cout>		30.4839/64 bits for one bit change in 128 character key
cout>		30.6403/64 bits for one bit change in 256 character key
cout>	 => 25.6363/64 bits on average -- Okay
